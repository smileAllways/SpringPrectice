<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- 자동으로 @Component들을 검색해서 어노테이션을 적용 -->
	<context:component-scan base-package="com.springbook.biz">
	</context:component-scan>
	
	<!-- AOP 어노테이션 설정 -->
	<!-- 어드바이스 클래스들은 @Service로 등록해야 한다. -->
	
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	
	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:config/database.properties" />
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction 설정 -->
	<!-- 클라이언트가 메소드를 실행 >> 비즈니스 메소드 실행완료 >> txAdvicer가 실행 >> 메소드가 완료면 commit(), 문제면 rollback()을 호출 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="boardPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="boardPointcut" />
	</aop:config>
	
	<!-- AOP 적용을 위해 등록된 횡단 관심 클래스(어드바이스 클래스) -->
	<!--  
	<bean id="log" class="com.springbook.biz.common.LogAdvice"></bean>
	<bean id="before" class="com.springbook.biz.common.BeforeAdvice"/>
	<bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"/>
	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"/>
	<bean id="around" class="com.springbook.biz.common.AroundAdvice"/>
	
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		<aop:aspect ref="before">
			<aop:before pointcut-ref="allPointcut" method="beforeLog"/>
		</aop:aspect>
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj"/>
		</aop:aspect>
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog"/>
		</aop:aspect>
	</aop:config>
	<aop:config>
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>
		<aop:aspect ref="afterReturning">
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj"/>
		</aop:aspect>
	</aop:config>
	-->
</beans>
